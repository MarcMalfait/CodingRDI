
       //‚Module . . . : DMPCVARA
       //‚Project  . . : Base (BASE)
       //‚Subsystem  . : Document Management (DM) & Global Document Management System (GDMS)
       //‚Program code : CM TO GDMS
       //‚Title  . . . : Retrieve document from Content Manager
       //‚             : IFS directory with FileName & PathName
       //‚             : Create XML file ready to send to GDMS
       //‚             : Write - Update DB2 files

       //‚Author . . . : Marc Malfait
       //‚Date   . . . : 14/09/2020
       //‚Audit  . . . :
       //‚Copyright  . : (C) LeasePlan Belgium 2020

     ‰/If Not Defined (CopyingProgramPrototypes)
      /Copy *LIBL/QSKLSRC,RPGLEHSPEC
     H Debug
     H Option(*SrcStmt: *NoDebugIO)
     H BndDir('THRP')

       //‚Program Prototype  *
      /Define DMPCVA
     ‰/EndIf

     ‰/If Defined (DMPCVA)

     D $cDMPCVA...
     D                 Ds                  Qualified
     D  InterfaceController...
     D                                     LikeDs(#dsDMPCVAInterfaceController)
     D                                     Inz(*LikeDs)
     D  ServiceNumber...
     D                                     LikeDs(#dsDMPCVAServiceNumber)
     D                                     Inz(*LikeDs)
     D  ServiceAccessNumber...
     D                                     LikeDs(#dsDMPCVAServiceAccessNumber)
     D                                     Inz(*LikeDs)

     D #dsDMPCVA       Ds           550    Qualified Template
     D* Input
     D  aItem...
     D                               12    Overlay(#dsDMPCVA:1)
     D  aFileName...
     D                              256    Overlay(#dsDMPCVA:*Next)
     D  aPathName...
     D                              256    Overlay(#dsDMPCVA:*Next)
     D* Input/Output
     D  aFileSuffix...
     D                                4    Overlay(#dsDMPCVA:*Next)

     D #dsDMPCVAInterfaceController...
     D                 Ds                  Qualified Template
     D* Input
     D  ParamsNotUsed                      Like(#$$aBASE.InterfaceController)
     D                                     Inz('0')
     D  ParamsUsed                         Like(#$$aBASE.InterfaceController)
     D                                     Inz('1')
     D* Output
     D  FalseFeedback                      Like(#$$aBASE.InterfaceController)
     D                                     Inz('0')
     D  TrueFeedback                       Like(#$$aBASE.InterfaceController)
     D                                     Inz('1')
     D #dsDMPCVAServiceNumber...
     D                 Ds                  Qualified Template
     D* Input
     D  CopyToIFS                          Like(#$$aBASE.ServiceNumber)
     D                                     Inz('0')
     D  GetFileSuffix                      Like(#$$aBASE.ServiceNumber)
     D                                     Inz('1')
     D* Output when false feedback
     D  InvalidCtlParameter...
     D                                     Like(#$$aBASE.ServiceNumber)
     D                                     Inz('1')
     D  InvalidSrvParameter...
     D                                     Like(#$$aBASE.ServiceNumber)
     D                                     Inz('2')
     D  InvalidAcsParameter...
     D                                     Like(#$$aBASE.ServiceNumber)
     D                                     Inz('3')
     D  InvalidKeyData...
     D                                     Like(#$$aBASE.ServiceNumber)
     D                                     Inz('4')
     D  ErrorFound...
     D                                     Like(#$$aBASE.ServiceNumber)
     D                                     Inz('5')
     D  UserDefined2                       Like(#$$aBASE.ServiceNumber)
     D                                     Inz('6')
     D  UserDefined3                       Like(#$$aBASE.ServiceNumber)
     D                                     Inz('7')
     D  UserDefined4                       Like(#$$aBASE.ServiceNumber)
     D                                     Inz('8')
     D  UserDefined5                       Like(#$$aBASE.ServiceNumber)
     D                                     Inz('9')
     D* Output when true feedback
     D  Success                            Like(#$$aBASE.ServiceNumber)
     D                                     Inz('0')
     D  Exit                               Like(#$$aBASE.ServiceNumber)
     D                                     Inz('1')
     D  Cancel                             Like(#$$aBASE.ServiceNumber)
     D                                     Inz('2')
     D  Enter                              Like(#$$aBASE.ServiceNumber)
     D                                     Inz('3')
     D #dsDMPCVAServiceAccessNumber...
     D                 Ds                  Qualified Template
     D  Init                               Like(#$$aBASE.ServiceAccessNumber)
     D                                     Inz('0')
     D

     DItemInfo         DS                  Based(pItemInfo) Qualified
     D                               10
     D  IndexClass                    5U 0

     DAttribute        DS
     D AttributeVal                  40    Dim(8)
     D AttributeName                 40    Dim(8)

     D dsCMGDDP        DS                  Qualified
     D DOCUMENT_ID                   12a
     D DOCUMENT_TYPE                  8a
     D ISSUE_DATE                     4a
     D ARCHIVE_NAME                  36a
     D CM_OR_GDMS                     2a
     D CM_VIRTUAL_DEL                 1a
     D CREATION_TS                     Z
     D CRT_USER_PRF                  10a
     D CRT_PGM_NAME                  10a
     D LST_CHG_TS                      Z
     D LST_CHG_USR_PR                10a
     D LST_CHG_PGM_NM                10a

     D dsCMGDDMP       DS                  Qualified
     D DOCUMENT_ID                   12a
     D DOCUMENT_TYPE                  8a
     D NOLS_NAME_ID                  40a
     D NOLS_ID                       40a

       // SQL output
     D SavIndexClass   S             10I 0
     D Priority        S             10U 0
     D Conflict        S             10U 0
     D OpenControl     S             10U 0
     D ObjAcc          S               *
     D Commit          S             10U 0
     D pIFS            S               *
     D FullFile        S            513    varying
     D FullFileExt     S                   Like(FullFile)
     D FullFileRename  S                   Like(FullFile)
     D FullFileRenameExt...
     D                 S                   Like(FullFile)
     D $aCMD           S            512a
     D Session         S               *
     D StageControl    S             10U 0
     D ContentClass    S             10U 0
     D Debug           S            255    Varying
     D pBuffer         S               *   Inz(%Addr(Buffer))
     D Buffer          S          32767
     D BufferSz        S             10I 0 Inz(%Size(Buffer))
     D DateTime        S            100a
     D i               S             10I 0
     D status          s              2a
     D UuidString      S             36a
     D ptrXML          S                   Like(#$$ptrBASE.Pointer) Inz

     ‚* Miscellaneous variables.
     D $aSystemEnvironmentCode...
     D                 S                   Like
     D                                     ( #$$aBASE.SystemEnvironmentCode
     D                                     )
     D                                     DtaAra
     D                                     ( SYENDA
     D                                     )
     D #Company        S             15    DtaAra(DANAME)
     D #Subsidiary     S              4    DtaAra(SUBSDA)
     D #Application    S              4    DtaAra(APCDDA)
     D $GDMFileCount   S             10  0 DtaAra(GDCTDA)

     ‰/EndIf
     ‰/If Not Defined (CopyingProgramPrototypes)
      /Undefine DMPCVA

       //‚Data Structures

     D $dsMainProcedureInput...
     D                 Ds                  Qualified
     D  aInterfaceController...
     D                                     Like(#$$aBASE.InterfaceController)
     D  aServiceNumber...
     D                                     Like(#$$aBASE.ServiceNumber)
     D  aServiceAccessNumber...
     D                                     Like(#$$aBASE.ServiceAccessNumber)
     D  aKeyData                           LikeDs(#dsDMPCVA)

     D $dsKeyData      Ds                  LikeDs(#dsDMPCVA)

     D $dsSystemDataStructure...
     D                sds
     D  $aJobName                    10    Overlay($dsSystemDataStructure:244)
     D  $aUser                       10    Overlay($dsSystemDataStructure:254)
     D  $aProgram                    10    Overlay($dsSystemDataStructure:334)
     D  $aModule                     10    Overlay($dsSystemDataStructure:344)

       //‚Work Fields

      /Copy *LIBL/QCPYSRC,DTTYP.BASE
      /Copy *LIBL/QCPYSRC,DTTYP.NOLS
      /Copy *LIBL/QCPYSRC,DTTYP.SYST


      /Define nSetAdtTrl
      /Include *LIBL/QCPYSRC,PROTOBASE

     D aSqlStatement   s                   like(#$$aSYST.VaryingSqlStatement)
     D                                     inz
     D $dsSql          ds                  qualified
     D DOCUMENT_ID                   12a
     D DOCUMENT_TYPE                  8a
     D SCANNING_DATE                  8s 0
     D SCANNING_TIME                  6s 0
     D FILE_CAB_CODE                  8a
     D FC_KEY1_DATA                  40a
     D FC_KEY2_DATA                  40a
     D ITEM_TYPE                      1a

       //‚Constants

      /Copy *LIBL/QCPYSRC,CONST.BASE

      //‚Procedures
     D Init            Pr
     D Program         Pr
     D ExcecuteSQL     Pr
     D CMDoc           Pr
     D StorageDB2      Pr

     D UpdateDB2       Pr
     D   Part                              likeds(dsCMGDDP)

     D DeleteDB2       Pr
     D   Part                              likeds(dsCMGDDMP)

     D getUUID         pr            16a
     D getUUIDString   pr            36a
     D   inUUID                      16a   options(*nopass)
     D check_SQLState  Pr                  like(status)
     D EndProgram      Pr

      /Free

       // Main
       Init();
       Program();
       EndProgram();
       // End-Main

      /End-Free

      * ------------------------------------------------------------------------
     P Init            B

      /Free

          //‚Miscellaneous initializations.
          In $aSystemEnvironmentCode;
          In #Company;
          In #Subsidiary;
          In #Application;

      /End-Free

     P Init            E
      * ------------------------------------------------------------------------

      * ------------------------------------------------------------------------
     P Program         B

      /Free

          ExcecuteSQL();

      /End-Free

     P Program         E
      * ------------------------------------------------------------------------

      * ------------------------------------------------------------------------
     P ExcecuteSQL     B


      /Free

       //////////////////////////////////////////////////////
       // Content Manager retrieve data last 10 years      //
       //////////////////////////////////////////////////////

          aSqlStatement = 'Select ' +
            'EKD0310_DOCUMENT_ID' +  ',' + 'EKD0310_DOCUMENT_TYPE' + ',' +
            'EKD0310_SCANNING_DATE' +  ',' + 'EKD0310_SCANNING_TIME' + ',' +
            'EKD0312_FILE_CABINET_CODE' + ',' + 'EKD0312_FC_KEY1_DATA' + ',' +
            'EKD0312_FC_KEY2_DATA' + ',' + 'EKD0312_ITEM_TYPE' + ' ' +
            'from EKDLIBFIL.EKD0310 CM10 ' +
            'inner join EKDLIBFIL.EKD0312 CM12 ' +
            'ON CM10.DOCID = CM12.FCDDOCID ' +
            'inner join EKDLIBFIL.EKD0317 CM17 ' +
            'ON CM12.FCDDOCID = CM17.KITEMID ' +
          //'where EKD0312_CREATE_DATE >= ' +
          //'REPLACE(CHAR((current date - 10 YEARS), ISO),''-'','''') ' +
          //'Fetch first 100 rows only';
            'where EKD0310_DOCUMENT_ID = ''B20114AA.AAH''';
          //'where EKD0310_DOCUMENT_ID = ''B20191AA.AAD''';

          SQLSTT=$$cBASE.SQLStateOK;
          exec sql Set Option Commit=*NONE, DatFmt=*ISO;
          exec sql prepare SelectReadStatement from :aSqlStatement;
          exec sql declare SelectReadCursor cursor for SelectReadStatement;
          exec sql open SelectReadCursor;

          dow SQLSTT=$$cBASE.SQLStateOK;
            exec sql fetch SelectReadCursor into :$dsSql;
            if SQLSTT=$$cBASE.SQLStateOK;

              // retrieve document from Content Manager
              CMDoc();

            endIf;

          enddo;

          exec sql close SelectReadCursor;
          SQLSTT=$$cBASE.SQLStateOK;

      /End-Free

     P ExcecuteSQL     E
      * ------------------------------------------------------------------------

      * ------------------------------------------------------------------------
     P CMDoc           B

       //‚Work Fields

     D nProcessingOK   s                   Like(#$$nBASE.Boolean)
     D                                     Inz(*On)

       //‚Data Structures

      * Content Manager: VI/400 API DATA STRUCT - RETURN CODE INFORMATION
      /COPY QVI/QVIRPGCPY,RETURNCODE

     DRtnCode          DS                  LikeDS(RetCode)

     DObject           DS                  Qualified
     D  Size                         10U 0
     D  Part                         10U 0
     D  Version                       5U 0
     D  Item                         17
     D  RepType                       9
     D  Reserved                     48

     DObjectInfo       DS           512    Qualified Based(pObjectInfo)
     D                               20
     D  ContentClass                 10U 0
     D                              164
     D  Collection                   45

     D DsBufferPartTmp...
     D                 Ds                  Qualified Template
     D   sBufferLength...
     D                                     Like(#$$uBASE.UnsignedInteger)
     D   aBufferContent...
     D                                     Like(Buffer)
     D DsBufferPartO   Ds                  Likeds(DsBufferPartTmp)
     D DsBufferPartI   Ds                  Likeds(DsBufferPartTmp)
     D                                     Based(ColBufferPart)

     DCM               DS                  Qualified Based(pCM)
     D  Header                       64
     D  Session                        *
     D  LoggedOn                       N
     D  Error                        10I 0
     D  OrgIndexClass                10I 0
     D  IndexClass                   10I 0
     D  ContentClass                 10I 0
     D  Collection                  255    Varying
     D  Item                        255    Varying
     D  Part                         10U 0
     D  AttributeID                  10I 0 Dim(8)
     D  AttributeName                40    Dim(8) Varying
     D  AttributeVal                 40    Dim(8) Varying
     D  AttributeLn                  10I 0 Dim(8)
     D  AttributeReq                   N   Dim(8)
     D  CommHandle                   20
     D  ActiveClient                   N

     D ColBufferParts...
     D                 S               *
     D NULL            S               *   Inz(*Null)
     D ptrXML          S                   Like(#$$ptrBASE.Pointer) Inz
     D aXMLData        S        1048576a   Inz
     D aFileData       S          32000a   Inz
     D iTotLen         S                   Like(#$$iBASE.Integer) Inz
     D iCnt            S                   Like(#$$iBASE.Integer) Inz
     D iFileLen        S                   Like(#$$iBASE.Integer) Inz
     D ptrIFS          S                   Like(#$$ptrBASE.Pointer) Inz
     D pItem           S               *
     D AccessLevel     S             10U 0
     D Disposition     S             10U 0
     D ii              S             10I 0
     D aFieldName      S            100a
     D Uuid            S             16a

      * Content Manager: VI/400 API DEFINITIONS
      /COPY QVI/QVIRPGCPY,EKDVILIB
      * Content Manager: VI/400 SYSTEM CONSTANTS
      /COPY QVI/QVIRPGCPY,EKDVITYP

       //‚Service Program Procedures

      /Define CMgetSession
      /Define CMLogOn
      /Define CMLogOff
      /Define CMGetObject
      /Define CMGetIndexClass
      /Define CMSetIndexClass
      /Define CMGetAttributeName
      /Define SwapUser
      /Define ConvertCCSID
      /Define IFSClose
      /Define IFSCreate
      /Define IFSWrite
      /Define IFSMove
      /Define IFSDelete
      /Define System
      /Define XMLAddNode
      /Define XMLAddElement
      /Define XMLCloseNode
      /Define XMLCreateDocument
      /Define XMLDeleteDocument
      /Define XMLGetAttribute
      /Define XMLGetElement
      /Define XMLInitialise
      /Define XMLMoveNext
      /Define XMLSetAttribute
      /Define XMLSetEncoding
      /Define XMLToString
      /Define XMLToFile
      /Define XMLTerminate
      /COPY QCPYSRC,PROTO.THRP

      /Define Collection_#
      /Include *LIBL/QCPYSRC,PROTO.BASE
     DSimLibStageObject...
     D                 PR                  ExtProc('SimLibStageObject')
     D  Session                        *   Value
     D  Object                         *   Value Options(*String)
     D  Priority                     10U 0 Value
     D  StageControl                 10U 0 Value
     D  Async                          *
     D  RtnCode                            Like(RetCode)

     DSimLibQueryObject...
     D                 PR                  ExtProc('SimLibQueryObject')
     D  Session                        *   Value
     D  Object                         *   Value Options(*String)
     D  Async                          *
     D  RtnCode                            Like(RetCode)

     DSimLibOpenObject...
     D                 PR                  ExtProc('SimLibOpenObject')
     D  Session                        *   Value
     D  Object                         *   Value Options(*String)
     D  AccessLevel                  10U 0 Value
     D  Priority                     10U 0 Value
     D  Conflict                     10U 0 Value
     D  OpenControl                  10U 0 Value
     D  Async                          *
     D  RtnCode                            Like(RetCode)

     DSimLibReadObject...
     D                 PR                  ExtProc('SimLibReadObject')
     D  Session                        *   Value
     D  Object                         *   Value Options(*String)
     D  Buffer                         *   Value
     D  BufferSz                     10U 0 Value
     D  Async                          *
     D  RtnCode                            Like(RetCode)

     DSimLibCloseObject...
     D                 PR                  ExtProc('SimLibCloseObject')
     D  Session                        *   Value
     D  ObjAcc                         *   Value
     D  Commit                       10U 0 Value
     D  Async                          *
     D  RtnCode                            Like(RetCode)

     DSimLibFree       PR                  ExtProc('SimLibFree')
     D  Session                        *   Value
     D  Ptr                            *   Value
     D  RtnCode                            Like(RetCode)

     DSimLibCloseAttr  PR                  ExtProc('SimLibCloseAttr')
     D  Session                        *   Value
     D  Item                           *   Value
     D  Disposition                  10U 0 Value
     D  Async                          *
     D  RtnCode                            Like(RetCode)

     DSimLibOpenItemAttr...
     D                 PR                  ExtProc('SimLibOpenItemAttr')
     D  Session                        *   Value
     D  ItemID                         *   Value Options(*String)
     D  IndexClass                   10U 0 Value
     D  AccessLevel                  10U 0 Value
     D  Async                          *
     D  RtnCode                            Like(RetCode)

     DSimLibReadAttr   PR                  ExtProc('SimLibReadAttr')
     D  Session                        *   Value
     D  Item                           *   Value
     D  AttributeID                  10U 0 Value
     D  Async                          *
     D  RtnCode                            Like(RetCode)

     DSimLibGetItemInfo...
     D                 PR                  ExtProc('SimLibGetItemInfo')
     D  Session                        *   Value
     D  ItemID                         *   Value Options(*String)
     D  IndexClass                   10U 0 Value
     D  Async                          *
     D  RtnCode                            Like(RetCode)

      /Free

       //////////////////////////////////////////////////////
       // Copy Content Manager document to memory          //
       //////////////////////////////////////////////////////

       // ****************************************************
       // For test in environment ACC following $dsKeyData
       // ****************************************************
       $dsKeyData.apathname = '/home/MMALFAIT';
       $dsMainProcedureInput.aServiceNumber = '0';
       // ****************************************************

       SwapUser('QVIUSER');

       nProcessingOK=*On; // init process OK

       // Init data
       $dsKeyData.apathname = '/home/MMALFAIT';
       $dsMainProcedureInput.aServiceNumber = '0';
       Uuid = getuuid();
       UuidString = getuuidstring(Uuid);

       //
       // Prepare Collection in memory to hold document parts
       //
       ColBufferParts = colInstantiateCollection(%Size(DsBufferPartTmp));
       If ColBufferParts=*Null;
         nProcessingOK=*Off; // Error found
       EndIf;

       If nProcessingOK; // Only continue if no errors found
         //
         // Logon to Content Manager
         //
         pCM = CMLogon();
         Session = CMgetSession(pCM);
         If Session = *Null;
           nProcessingOK=*Off; // Error found
         EndIf;
       EndIf;

       If nProcessingOK; // Only continue if no errors found
         //
         // Get object indexclass
         //
         CM.Item = $dsSql.DOCUMENT_ID;
         CM.IndexClass = 0;
         SimLibGetItemInfo(CM.Session: 'D' + %Trim(CM.Item): CM.IndexClass:
                                                             NULL: RtnCode);
         If RtnCode.RC <> 0 or RtnCode.Param1Ptr = *Null;
           nProcessingOK = *Off; // Error found
         EndIf;
       EndIf;

       If nProcessingOK; // Only continue if no errors found
         pItemInfo = RtnCode.Param1Ptr;
         SavIndexClass = ItemInfo.IndexClass;
         CM.IndexClass = ItemInfo.IndexClass;
         SimLibFree(CM.Session: RtnCode.Param1Ptr: RtnCode);

         //
         // Load index class attribute info
         //
         CMSetIndexClass(pCM: CMGetIndexClass(pCM));
         CM.OrgIndexClass = SavIndexClass;

         //
         // Query object
         //
         CM.Item = $dsSql.DOCUMENT_ID;
         CM.ContentClass = 0;
         CM.Collection = '';
         For i = 1 DownTo 0;
           Clear Object;
           Object.Size = %Size(Object);
           Object.Part = i;
           %Str(%Addr(Object.Item): 17) = 'D' + %Trim(CM.Item);
           %Str(%Addr(Object.RepType): 9) = '';
           SimLibQueryObject(CM.Session: Object: NULL: RtnCode);
           If RtnCode.RC = 0 and RtnCode.Param1Ptr <> *NULL;
             pObjectInfo = RtnCode.Param1Ptr;
             ContentClass = ObjectInfo.ContentClass;
             CM.Part = i;
             CM.ContentClass = ObjectInfo.ContentClass;
             CM.Collection = %Str(%Addr(ObjectInfo.Collection));
             SimLibFree(CM.Session: RtnCode.Param1Ptr: RtnCode);
             Leave;
           EndIf;
         EndFor;
       EndIf;

       //
       // Open Item Attributes
       //
       CM.Item = $dsSql.DOCUMENT_ID;
       AccessLevel = SIMACCSHRREAD;
       SimLibOpenItemAttr(CM.Session: 'D' + %Trim(CM.Item): CM.IndexClass:
                                             AccessLevel: NULL: RtnCode);
       If RtnCode.Param1Ptr = *Null;
         nProcessingOK=*Off; // Error found
       Else;
         pItem = RtnCode.Param1Ptr;
       EndIf;

       //
       // Get attribute values
       //
       If nProcessingOK; // Only continue if no errors found
         Clear Attribute;
         ii = 1;
         For i = 1 to %Elem(CM.AttributeID);
            If CM.AttributeID(i) <> 0;
               SimLibReadAttr(CM.Session: pItem: CM.AttributeID(i):
                  NULL: RtnCode);
               If RtnCode.Param1Ptr <> *Null;
                  CM.AttributeVal(i) = %Str(RtnCode.Param1Ptr);
                  AttributeVal(ii) = CM.AttributeVal(i);
                  AttributeName(ii) = CMGetAttributeName(pCM: i);
                  ii += 1;
                  SimLibFree(CM.Session: RtnCode.Param1Ptr: RtnCode);
               EndIf;
            EndIf;
         EndFor;

         //
         // Close Attributes
         //
         Disposition = SIMOPTDISCARD;
         SimLibCloseAttr(CM.Session: pItem: Disposition: NULL: RtnCode);

         // determine document extension type
         Select; // See DMPWBARA for a list, currently only PDF/TIFF supported for Fines LPLU/XLBE
           When ContentClass =    1
                Or  ContentClass =   12; // TIFF
             If $DsKeyData.aFileSuffix = *Blanks;
                $DsKeyData.aFileSuffix = 'TIFF';
             EndIf;
           When ContentClass =   43; // TXT
             $DsKeyData.aFileSuffix = 'TXT';
           When ContentClass =  122; // XLS/XLSX
             $DsKeyData.aFileSuffix = 'XLS';
           When ContentClass =  151; // DOC/DOCX
             $DsKeyData.aFileSuffix = 'DOC';
           When ContentClass =  206; // GIF
             $DsKeyData.aFileSuffix = 'GIF';
           When ContentClass =  207; // JPEG
             $DsKeyData.aFileSuffix = 'JPEG';
           When ContentClass = 4097; // PDF
             $DsKeyData.aFileSuffix = 'PDF';
           Other;
             nProcessingOK=*Off; // Error found
             $DsKeyData.aFileSuffix = 'ERR';
         EndSl;
       EndIf;

       If  nProcessingOK  // Only continue if no errors found
         And $dsMainProcedureInput.aServiceNumber =
             $cDMPCVA.ServiceNumber.CopyToIFS; // And copy to IFS requested
         //
         // Open object
         //
         Debug = 'SimLibOpenObject';
         SimLibOpenObject(Session: Object: AccessLevel:
            Priority: Conflict: OpenControl: NULL: RtnCode);
            // Stage object workaround
            If RtnCode.RC = 6052;
              Priority = 1;
              StageControl = 1;
              Debug = 'SimLibStageObject';
              SimLibStageObject(Session: Object: +
                  Priority: StageControl: NULL: RtnCode);
              Priority = 0;
              Debug = 'SimLibOpenObject-2';
              SimLibOpenObject(Session: Object: AccessLevel:
                  Priority: Conflict: OpenControl: NULL: RtnCode);
            EndIf;
         If RtnCode.RC = 0 and RtnCode.Param1Ptr <> *NULL;
           ObjAcc = RtnCode.Param1Ptr;
         Else;
           nProcessingOK=*Off; // Error found
         EndIf;
       EndIf;

       If  nProcessingOK // Only continue if no errors found
       And $dsMainProcedureInput.aServiceNumber =
               $cDMPCVA.ServiceNumber.CopyToIFS; // And copy to IFS requested
         //
         // Read object + write on memory
         //
         Debug = 'SimLibReadObject';
         SimLibReadObject(Session: ObjAcc: pBuffer: BufferSz: NULL: RtnCode)  ;
         DoW RtnCode.Param2 > 0;
           Select;
             When ContentClass = 43 Or ContentClass = 400;
               Buffer = ConvertCCSID(%SubSt(Buffer: 1: RtnCode.Param2): 819: 0);
           EndSl;
           DsBufferPartO.sBufferLength = RtnCode.Param2;
           DsBufferPartO.aBufferContent = %SubSt(Buffer: 1: RtnCode.Param2);
           nAddCollectionElement(ColBufferParts
                                :DsBufferPartO);
           Debug = 'SimLibReadObject-2';
           SimLibReadObject(Session: ObjAcc: pBuffer: BufferSz: NULL:
                                                                 RtnCode);
         EndDo;
       EndIf;

       //
       // Close object
       //
       If Session <> *Null;
         Debug = 'SimLibCloseObject';
         SimLibCloseObject(Session: ObjAcc: Commit: NULL: RtnCode);
       EndIf;

       //
       // LogOff from Content Manager
       //
       If pCM <> *Null;
         Debug = 'SimLibLogOff';
         CMLogOff(pCM);
       EndIf;

       SwapUser('*PREVIOUS');

       // retrieve count number of file name from dtaara and lock
       in *lock $GDMFileCount;
       $GDMFileCount += 1;

       // File Names and Path composition
       $dsKeyData.aFilename = %trim($aJobName) +
         %Editc($GDMFileCount:'X') + '.' + '1';
       FullFile = %Trim($dsKeyData.aPathName) + '/' +
                  %Trim($dsKeyData.aFilename) + '.tmp';
       FullFileExt = %Trim($dsKeyData.aFilename) + '.' +
                     %Trim($dsKeyData.aFileSuffix);
       FullFileRenameExt = %Trim($dsKeyData.aPathName) + '/' +
                           FullFileExt;

       // document information to storage file CMGDDP & CMGDDMP
       StorageDB2();

       //////////////////////////////////////////////////////
       // Copy Content Manager document from memory to IFS //
       //////////////////////////////////////////////////////

       SwapUser('BASEEXE');

       If nProcessingOK; // Only continue if no errors found
         //
         // Open object on IFS
         pIFS = IFSCreate(FullFile: '*BINARY');
         If pIFS = *Null;
           nProcessingOK=*Off; // Error found
         Else;
           // When the PDF is created, always set *PUBLIC *ALL to prevent problems
           // when another user wants to create this PDF again. Otherwise his job will
           // crash on the IFSWrite below because he might be refused to delete the PFD
           // that was still there because of a crash in the first job.
           $aCmd =
              'CHGAUT OBJ(''' + %Trim(FullFile) +
              ''') ' +
              'USER(*PUBLIC) DTAAUT(*RWX) OBJAUT(*ALL)';
           System(%Trim($aCmd));
         EndIf;
       EndIf;

       //
       // Copy all part from memory to IFS
       //
       If nProcessingOK; // Only continue if no errors found
         ColBufferPart =
             ptrGetCollectionElement(ColBufferParts
                                    :$$cBASE.SpecialValue.FirstOccurrence);
         DoW ColBufferPart <> *NULL;
           IFSWrite(pIFS: %SubSt(DsBufferPartI.aBufferContent
                                :1
                                :DsBufferPartI.sBufferLength));
           ColBufferPart =
               ptrGetCollectionElement(ColBufferParts
                                      :$$cBASE.SpecialValue.NextOccurrence);
         EndDo;
       EndIf;

       //
       // Close object on IFS
       //
       If pIFS <> *Null;
         IFSClose(pIFS);
         If nProcessingOK; // Only continue if no errors found
           IFSMove(FullFile
                  :FullFileRenameExt); // Rename the object, so that Comm. Mgt can pick it up
         EndIf;
       EndIf;

       //
       // Destroy Collection in memory to clean up garbage
       //
       If ColBufferParts <> *Null;
         nDestroyCollection(ColBufferParts);
       EndIf;

       // Handle dtaara file number count
       If Not nProcessingOK;
         $GDMFileCount -= 1;
       EndIf;

       out $GDMFileCount;

       SwapUser('*PREVIOUS');

       //////////////////////////////////////////////////////
       // Create XML file document metadata                //
       //////////////////////////////////////////////////////

       If nProcessingOK; // Only continue if no errors found
         //Create Metadata.XML Document
         $dsKeyData.aFileSuffix = 'XML';
         FullFile = %Trim($dsKeyData.aPathName) + '/' +
                    %Trim($dsKeyData.aFilename) + '.tmp';
         FullFileRename = %Trim($dsKeyData.aPathName) + '/' +
                          %Trim($dsKeyData.aFilename) + '.' +
                          %Trim($dsKeyData.aFileSuffix);

         IFSDelete(FullFile);

         ptrIFS = IFSCreate(FullFile);

         XMLInitialise();
         //ImportSession
         ptrXML = XMLCreateDocument('ImportSession');
         XMLSetEncoding(ptrXML: 'UTF-8');

         //Environment
         XMLAddNode(ptrXML : 'System');
         XMLAddElement(ptrXML : 'Environment' : $aSystemEnvironmentCode);
         aXMLData = XMLToString(ptrXML);
         XMLTerminate();

         //Document_type
         XMLAddElement(ptrXML : 'Document_type' : $dsSql.DOCUMENT_TYPE);
         aXMLData = XMLToString(ptrXML);
         XMLTerminate();

         //CompanyCode
         XMLAddElement(ptrXML : 'CompanyCode' : #Company);
         aXMLData = XMLToString(ptrXML);
         XMLTerminate();

         //Application
         XMLAddElement(ptrXML : 'Application' : #Application);
         aXMLData = XMLToString(ptrXML);
         XMLTerminate();

         //AS400RequestID
         XMLAddElement(ptrXML : 'AS400RequestID' : FullFileExt);
         aXMLData = XMLToString(ptrXML);
         XMLTerminate();

         //VEDRequestID
         XMLAddElement(ptrXML : 'VEDRequestID' : UuidString);
         aXMLData = XMLToString(ptrXML);
         XMLTerminate();

         //DateTime
         DateTime = %char(%date($dsSql.SCANNING_DATE:*iso)) + '-' +
                    %char(%time($dsSql.SCANNING_TIME:*hms):*ISO) + '.000000';
         XMLAddElement(ptrXML : 'DateTime' : DateTime);
         aXMLData = XMLToString(ptrXML);
         XMLTerminate();

         XMLCloseNode(ptrXML);

         //IndexFields
         XMLAddNode(ptrXML : 'IndexFields');

         //Indexfield fieldName
         For i = 1 to %Elem(AttributeName);
           If AttributeName(i) = *Blank;
             Leave;
           EndIf;
           XMLAddElement(ptrXML : 'IndexField' : %Trim(AttributeVal(i)));
           XMLSetAttribute(ptrXML:'Name':%Trim(AttributeName(i)));
           aXMLData = XMLToString(ptrXML);
           XMLTerminate();
         EndFor;

         XMLCloseNode(ptrXML);

         //FileName
         XMLAddNode(ptrXML : 'FileName');

         //Import File Name
         XMLAddElement(ptrXML : 'ImportFileName' : %Trim(FullFileRenameExt));
         aXMLData = XMLToString(ptrXML);
         XMLTerminate();

         XMLCloseNode(ptrXML);

         iTotLen = %Len(%Trim(aXMLData));
         iCnt = *Zeros;
         aFileData = %Subst(aXMLData:1+iCnt*%Size(aFileData): +
                     %Size(aFileData));
         Dow %Trimr(aFileData) <> *Blanks;
           If (iCnt*%Size(aFileData) + %Len(%Trimr(aFileData))) = iTotLen;
             iFileLen = %len(%Trimr(aFileData));
           Else;
             iFileLen = %len(aFileData);
           EndIf;
           IFSWrite(ptrIFS:%Subst(aFileData:1:iFileLen));
           iCnt += 1;
           aFileData = %Subst(aXMLData:1+iCnt*%Size(aFileData): +
                       %Size(aFileData));
         EndDo;

         IFSClose(ptrIFS);
         IFSMove(FullFile
                :FullFileRename);
         $aCmd = 'CHGAUT OBJ(''' +
               %Trim($dsKeyData.apathname) +
               '/' + $dsKeyData.aFilename + '.XML' + ''') ' +
               'USER('+ %Trim($aUser) + ') DTAAUT(*RWX) OBJAUT(*ALL)';
         System($aCmd);
         $aCmd = 'CHGAUT OBJ(''' +
               %Trim($dsKeyData.apathname) +
               '/' + $dsKeyData.aFilename + '.XML' + ''') ' +
               'USER('+ %Trim($aUser) + ') DTAAUT(*RWX) OBJAUT(*ALL)';
         System($aCmd);
         $aCmd = 'CHGAUT OBJ(''' +
               %Trim($dsKeyData.apathname) +
               '/' + $dsKeyData.aFilename + '.XML' + ''') ' +
               'USER(QDAY) DTAAUT(*RWX) OBJAUT(*ALL)';
         System($aCmd);
       EndIf;

      /End-Free

     P CMDoc           E
      * ------------------------------------------------------------------------

      * ------------------------------------------------------------------------
     P StorageDB2      B

      /Free

          //Insert data from fields into SQL table

          // TABLE CMGDDP

          dsCMGDDP.DOCUMENT_ID      = $dsSql.DOCUMENT_ID                     ;
          dsCMGDDP.DOCUMENT_TYPE    = $dsSql.DOCUMENT_TYPE                   ;
          dsCMGDDP.ISSUE_DATE       = %Subst(%char($dsSql.SCANNING_DATE):1:4);
          dsCMGDDP.ARCHIVE_NAME     = UuidString                            ;
          dsCMGDDP.CM_OR_GDMS       = 'CM'                                   ;
          dsCMGDDP.CM_VIRTUAL_DEL   = 'N'                                    ;
          dsCMGDDP.CREATION_TS      = *Loval                                 ;
          dsCMGDDP.CRT_USER_PRF     = ' '                                    ;
          dsCMGDDP.CRT_PGM_NAME     = ' '                                    ;
          dsCMGDDP.LST_CHG_TS       = *Loval                                 ;
          dsCMGDDP.LST_CHG_USR_PR   = ' '                                    ;
          dsCMGDDP.LST_CHG_PGM_NM   = ' '                                    ;

          if dsCMGDDP.CREATION_TS = *Loval;
             nSetAdtTrl(%Addr(dsCMGDDP.CREATION_TS):
                        %Addr(dsCMGDDP.CRT_USER_PRF):
                        %Addr(dsCMGDDP.CRT_PGM_NAME));
          Else;
             nSetAdtTrl(%Addr(dsCMGDDP.LST_CHG_TS):
                        %Addr(dsCMGDDP.LST_CHG_USR_PR):
                        %Addr(dsCMGDDP.LST_CHG_PGM_NM));
          EndIf;

          exec sql
            INSERT INTO CMGDDP VALUES(
              :dsCMGDDP.DOCUMENT_ID,
              :dsCMGDDP.DOCUMENT_TYPE,
              :dsCMGDDP.ISSUE_DATE,
              :dsCMGDDP.ARCHIVE_NAME,
              :dsCMGDDP.CM_OR_GDMS,
              :dsCMGDDP.CM_VIRTUAL_DEL,
              :dsCMGDDP.CREATION_TS,
              :dsCMGDDP.CRT_USER_PRF,
              :dsCMGDDP.CRT_PGM_NAME,
              :dsCMGDDP.LST_CHG_TS,
              :dsCMGDDP.LST_CHG_USR_PR,
              :dsCMGDDP.LST_CHG_PGM_NM);

           // Constraint Violation - Duplicate key
           if check_SQLState() = '23';
             nSetAdtTrl(%Addr(dsCMGDDP.LST_CHG_TS):
                        %Addr(dsCMGDDP.LST_CHG_USR_PR):
                        %Addr(dsCMGDDP.LST_CHG_PGM_NM));
             dsCMGDDP.ARCHIVE_NAME = UuidString;
             UpdateDB2(dsCMGDDP);
             DeleteDB2(dsCMGDDMP);
           EndIf;

          // TABLE CMGDDMP

          For i = 1 To %elem(AttributeVal);
            if AttributeName(i) = *Blank;
              leave;
            EndIf;
            dsCMGDDMP.DOCUMENT_ID        = $dsSql.DOCUMENT_ID         ;
            dsCMGDDMP.DOCUMENT_TYPE      = $dsSql.DOCUMENT_TYPE       ;
            dsCMGDDMP.NOLS_NAME_ID       = AttributeName(i)           ;
            dsCMGDDMP.NOLS_ID            = AttributeVal(i)            ;

            exec sql
              INSERT INTO CMGDDMP VALUES(
                :dsCMGDDMP.DOCUMENT_ID,
                :dsCMGDDMP.DOCUMENT_TYPE,
                :dsCMGDDMP.NOLS_NAME_ID,
                :dsCMGDDMP.NOLS_ID);

          EndFor;

      /End-Free

     P StorageDB2      E
      * ------------------------------------------------------------------------

      * ------------------------------------------------------------------------
     P check_SQLState  B
     D                 PI             2a

       // Standard API Error Data Structure
     D APIError        DS                  qualified
     D  bytesProvided                10i 0 inz(%size(APIError))
     D  bytesAvail                   10i 0 inz(0)
     D  msgId                         7a
     D                                1a
     D  msgData                     240a

       // Work fields
     D messageKey      s              4a
     D messageType     s             10a
     D messageText     s           1024a

     D                 DS
     D  lastState                     5a
     D  status_SQL                    2a   overLay(lastState)

      // Constants
     D W_DIAGNOSTIC    C                   '*DIAG'
     D W_EOF           C                   '02'
     D W_ESCAPE        C                   '*ESCAPE'
     D W_MSGF          C                   'QCPFMSG   *LIBL'
     D W_MSGID         C                   'CPF9897'
     D W_STACK_ENTRY   C                   '*'
     D W_STACK_COUNT1  C                   1
     D W_SUCCESS       C                   '00'
     D W_WARNING       C                   '01'

      /Free

        // Get last state
       exec SQL
         get diagnostics condition 1 :lastState = RETURNED_SQLSTATE;

       return status_SQL;

      /End-Free

     P check_SQLState  E
      * ------------------------------------------------------------------------

      * ------------------------------------------------------------------------
     P UpdateDB2       B
     D                 PI
     D   Part                                likeds(dsCMGDDP)

      /Free

          exec sql
            UPDATE CMGDDP set
              CMGDDP.ARCHIVE_NAME             = :part.ARCHIVE_NAME,
              CMGDDP.CM_OR_GDMS               = 'CM',
              CMGDDP.CM_VIRTUAL_DELETE        = 'N',
              CMGDDP.LAST_CHANGE_TIMESTAMP    = :Part.LST_CHG_TS,
              CMGDDP.LAST_CHANGE_USER_PROFILE = :Part.LST_CHG_USR_PR,
              CMGDDP.LAST_CHANGE_PROGRAM_NAME = :Part.LST_CHG_PGM_NM;

      /End-Free

     P UpdateDB2       E
      * ------------------------------------------------------------------------

      * ------------------------------------------------------------------------
     P DeleteDB2       B
     D                 PI
     D   Part                                likeds(dsCMGDDMP)

      /Free

          exec sql
            Delete from CMGDDMP
            Where CMGDDMP.DOCUMENT_ID = :Part.DOCUMENT_ID and
                  CMGDDMP.DOCUMENT_TYPE = :Part.DOCUMENT_TYPE;

      /End-Free

     P DeleteDB2       E
      * ------------------------------------------------------------------------

      * ------------------------------------------------------------------------
     p getUUID         b
     d getUUID         pi            16a

      // Implements DCE version 1 UUID
      // Source link:
      // http://publib.boulder.ibm.com/iseries/v5r1/ic2924/tstudio/tech_ref/mi/GENUUID.htm

      // Template structure required for _GENUUID.
     d UUID_template   ds
     d  UUID_bytes_provided...
     d                               10u 0 inz(%size(uuid_template))
     d  UUID_bytes_available...
     d                               10u 0
     d  UUID_reserved                 8a   inz(*allx'00')
     d  UUID_UUID                    16a

     d GenUUID         pr                  extproc('_GENUUID')
     d  UUID_Template                  *   value

      /free
         reset uuid_template;
         GenUUID(%addr(UUID_Template));
         return UUID_UUID;
      /end-free

     p getUUID         e
      * ------------------------------------------------------------------------

      * ------------------------------------------------------------------------
     p getUUIDString   b
     d getUUIDString   pi            36a
     d  inUUID                       16a   options(*nopass)

     d workuuid        s                   inz like(inuuid)
     d uuid_string     s             36a   inz

      // Convert hex to character API.
     d cvthc           pr                  extproc('cvthc')
     d  Result                    65534a   options(*varsize)
     d  Source                    32767a   options(*varsize)
     d  ResultSize                   10i 0 value

      // NLS convert case.
     d convertcase     pr                  extproc('QlgConvertCase')
     d  ctrlBlock                          const like(FRCB)
     d  inString                  65535a   const options(*varsize)
     d  outString                 65535a   options(*varsize)
     d  inLength                     10i 0 const
     d  apiErrorDS                  300a   options(*varsize)

      // Formatted request control block required by QlgConvertCase.
     d FRCB            ds                  qualified
     d  ReqType                      10i 0 inz(1)
     d  CCSID                        10i 0 inz(0)
     d  CvtTo                        10i 0 inz(0)
     d  Reserved                     10a   inz(*allx'00')

      // Helper constants for FRCB.
      // Uses request 1 (CCSID format): assumes lower case, job CCSID.
      // For more information about the control block, see:
      // http://publib.boulder.ibm.com/infocenter/iseries/v5r3/topic/apis/QLGCNVCS.htm
     d CvtToUpper      c                   0
     d CvtToLower      c                   1

      // Error code structure.
     d errc0100        ds
     d  errc01bytpro                 10i 0 inz(%size(errc0100))
     d  errc01bytava                 10i 0 inz
     d  errc01excid                   7a   inz
     d  errc01resaaa                  1a   inz(x'00')
     d  errc01excdta                250a   inz

      /free
         if %parms() = 1;
            workuuid = inuuid;
         else;
            workuuid = getuuid();
         endif;
         cvthc( uuid_string : workuuid : %len(workuuid)*2 );
         frcb.cvtto = cvttolower;
         reset errc0100;
         convertcase( frcb : uuid_string : uuid_string :
                      %len(uuid_string) : errc0100 );
         uuid_string = %subst(uuid_string:1:8) + '-' +
                       %subst(uuid_string:9:4) + '-' +
                       %subst(uuid_string:13:4) + '-' +
                       %subst(uuid_string:17:4) + '-' +
                       %subst(uuid_string:21:12);
         return uuid_string;
      /end-free

     p getUUIDString   e
      * ------------------------------------------------------------------------

      * ------------------------------------------------------------------------
     P EndProgram      B

      /Free

          *INLR = *ON;

      /End-Free

     P EndProgram      E
      * ------------------------------------------------------------------------

     ‰/EndIf
